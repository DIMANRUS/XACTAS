<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addPanelDescription" xml:space="preserve">
    <value>The button will allow you to add a Xamarin project.Android, whose UI you can edit in Android Studio.</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>Bugs</value>
  </data>
  <data name="code" xml:space="preserve">
    <value>Source code</value>
  </data>
  <data name="copyDimanrus" xml:space="preserve">
    <value>2022  Dmitry Sorokin | Made in Russia!</value>
    <comment>footer</comment>
  </data>
  <data name="copyIcons" xml:space="preserve">
    <value>Icons belong to</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>This application will allow you to edit the Xamarin project UI.Android in Android Studio. At the same time, all changes occurring in Visual Studio or Android Studio will be synchronized.</value>
  </data>
  <data name="download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="downloadFile" xml:space="preserve">
    <value>For the application to work, you need to download .NET 6 Runtime and VC 2015-2022.</value>
  </data>
  <data name="idea" xml:space="preserve">
    <value>Ideas</value>
  </data>
  <data name="language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="optionPanelDescription" xml:space="preserve">
    <value>In this panel, you can specify the path to your IDE. By default, the paths that were left unchanged during installation are for Visual Studio 2022 Community and Android Studio. It is also possible to change the theme and language.</value>
  </data>
  <data name="projectPanelDescription" xml:space="preserve">
    <value>First comes the name of the project, then the button, when clicked, which opens a folder with Xamarin.Android project. Then there are 3 buttons that start the file exchange process between the two IDEs (the 1st button just starts synchronization between projects, and the rest start the synchronization process itself and the Ide itself). The last button is to delete the project from the list (deletion only after the synchronization between the IDE stops)</value>
  </data>
  <data name="rate" xml:space="preserve">
    <value>Reviews</value>
  </data>
  <data name="rider" xml:space="preserve">
    <value>If it is possible to use the Reader IDE, it is better to use it, since there is built-in support for the UI designer from Android Studio and more features. But there is one limitation, it is paid, but there are options for free use.</value>
  </data>
  <data name="stopPanelDescription" xml:space="preserve">
    <value>This panel is displayed only during the start of the file exchange process between the IDE. First comes the name of the running project, then the button to stop.</value>
  </data>
  <data name="support" xml:space="preserve">
    <value>Support</value>
  </data>
  <data name="uiNameBlock" xml:space="preserve">
    <value>User Interface</value>
  </data>
  <data name="video" xml:space="preserve">
    <value>Video</value>
  </data>
</root>