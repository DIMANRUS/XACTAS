<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addUi" xml:space="preserve">
    <value>添加项目</value>
  </data>
  <data name="asui" xml:space="preserve">
    <value>在Android Studio中打开项目</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="code" xml:space="preserve">
    <value>源代码</value>
  </data>
  <data name="copyDimanrus" xml:space="preserve">
    <value>2022德米特里*索罗金</value>
    <comment>footer</comment>
  </data>
  <data name="copyIcons" xml:space="preserve">
    <value>图标属于</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>此应用程序将允许您创建用户 interface .NET Android Studio 中的 Android 应用程序。 与此同时，Visual Studio 或 Android Studio 中发生的所有更改都将同步。</value>
  </data>
  <data name="download" xml:space="preserve">
    <value>下载</value>
  </data>
  <data name="downloadFile" xml:space="preserve">
    <value>对于应用程序的工作，.NET 6 运行时和VS2015-2022，如果你还没有安装它们。</value>
  </data>
  <data name="folderasUi" xml:space="preserve">
    <value>安装Android Studio的路径</value>
  </data>
  <data name="folderUi" xml:space="preserve">
    <value>打开项目文件夹</value>
  </data>
  <data name="foldervsUi" xml:space="preserve">
    <value>设置 Visual Studio 的路径</value>
  </data>
  <data name="idea" xml:space="preserve">
    <value>想法</value>
  </data>
  <data name="informationUi" xml:space="preserve">
    <value>有关申请的资料</value>
  </data>
  <data name="language" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="languageUi" xml:space="preserve">
    <value>语言变化</value>
  </data>
  <data name="launchUi" xml:space="preserve">
    <value>启动Ide之间的同步。</value>
  </data>
  <data name="rate" xml:space="preserve">
    <value>检讨报告</value>
  </data>
  <data name="removeUi" xml:space="preserve">
    <value>从应用程序中删除项目</value>
  </data>
  <data name="rider" xml:space="preserve">
    <value>创建本机用户 interface .NET Android 应用程序可以使用 Rider，但它是付费的。</value>
  </data>
  <data name="stopUi" xml:space="preserve">
    <value>停止 Ide 之间的同步</value>
  </data>
  <data name="support" xml:space="preserve">
    <value>支援服务</value>
  </data>
  <data name="themeUi" xml:space="preserve">
    <value>更改应用主题</value>
  </data>
  <data name="video" xml:space="preserve">
    <value>短片</value>
  </data>
  <data name="vsUi" xml:space="preserve">
    <value>在 Visual Studio 中打开项目</value>
  </data>
</root>